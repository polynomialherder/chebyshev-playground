import numpy as np
import matplotlib.pyplot as plt 

from scipy.interpolate import lagrange
from scipy.linalg import norm
from chebyshev import ChebyshevPolynomial

from numexp import ExperimentLogger
from cli import build_static_site


if __name__ == '__main__':
    logger = ExperimentLogger()

    X = np.linspace(-10, 10)

    # Parameters
    n = 3
    T = ChebyshevPolynomial.classical(n)
    E = T.E
    k = 1
    R = np.sort(T.polynomial.deriv(k-1).r)
    trials = 1000

    parameters = {
        "n": n,
        "E": "[-1, 1]" if len(E) > n,
        "k": k,
        "trials": trials
    }

    logger.start_experiment(
        name="Duffin-Schaeffer Estimates (classical, normalized on E)",
        tags=["kemperman-theorem", "inequalities"],
        comment="""This script plots the region in the complex plane where the inequality
$$|T_n^{(k)}(z)| \ge |P^{(k)}(z)|$$
holds, where $P$ is degree $n$ and has unit norm $1$ on a set $E$.

Polynomials $P$ are generated by choosing n random roots from $[-1, 1]$, then normalizing the resulting monic polynomial on $E$.

The estimate proved by Kemperman is known to hold outside $\min(X)$ and $\max(X)$ where $X$ is the set of roots of $T_n^{(k-1)}$. 

**Parameters**: {{PARAMETERS}}.

**Kemperman, J.H.B.**
[Markov type inequalities for the derivatives of a polynomial](https://www.sciencedirect.com/science/article/pii/S0924650909702752), *Aspects of Mathematics and its Applications*, Ed. J. A. Barroso, Elsevier, 1986, pp. 465-476
        """.replace("{{PARAMETERS}}", f"{parameters}")
    )

    xv, yv, zv = T.grid()
    Pzv = np.abs(T.polynomial.deriv(k)(zv))

    holds = np.ones(zv.shape)
    for i in range(trials):
        r = np.random.uniform(-1, -1, n)
        Q = np.poly1d(r, r=True)
        QQ = Q / norm(Q(E), np.inf)

        holds = np.logical_and(holds, Pzv > np.abs(QQ.deriv(k)(zv)))

    fig, ax = plt.subplots()
    ax.contourf(xv, yv, holds)

    ax.plot(T.polynomial.deriv(k-1).r.real, T.polynomial.deriv(k-1).r.imag, "o", color="yellow", label="Roots of $T^{(k-1)}_n$")

    center = (R[0] + R[-1]) / 2
    radius = abs(R[-1] - R[0]) / 2
    circle = plt.Circle((center, 0), radius, color='green', linestyle='dashed', fill=False)
    ax.add_patch(circle)

    try:
        for i in range(0, len(R)):
            center = (R[i] + R[i+1]) / 2
            radius = abs(R[i+1] - R[i]) / 2
            circle = plt.Circle((center, 0), radius, color='blue', linestyle='dashed', fill=False)
            ax.add_patch(circle)
    except:
        pass

    ax.set_aspect('equal')
    ax.legend()
    logger.save_figure(fig, "kemperman.png")
    logger.end_experiment()
    build_static_site("experiments.db", "dist")